--Start by getting a feel for the hacker_news table!
--What are the top five stories with the highest scores?

SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5;

--Recent studies have found that online forums tend to be dominated by a small percentage of their users (1-9-90 Rule).Is this true of Hacker News? Is a small percentage of Hacker News submitters taking the majority of the points?First, find the total score of all the stories.

SELECT SUM(score)
FROM hacker_news;

--Next,we need to pinpoint the users who have accumulated a lot of points across their stories.Find the individual users who have gotten combined scores of more than 200, and their combined scores.GROUP BY and HAVING are needed!

SELECT user, SUM(score)
FROM hacker_news
GROUP BY user
HAVING SUM(score) > 200
ORDER BY 2 DESC;

--Oh no! While we are looking at the power users, some users are rickrolling — tricking readers into clicking on a link to a funny video and claiming that it links to information about coding.The url of the video is: https://www.youtube.com/watch?v=dQw4w9WgXcQ How many times has each offending user posted this link?

SELECT user,
COUNT(*)
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY 1
ORDER BY 2 DESC;

--Hacker News stories are essentially links that take users to other websites.Which of these sites feed Hacker News the most:GitHub, Medium, or New York Times? First, we want to categorize each story based on their source.

SELECT CASE
WHEN url LIKE '%medium.com%' THEN 'Medium'
WHEN url LIKE '%github.com%' THEN 'Github'
WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
ELSE 'Other'
END AS 'Source'
FROM hacker_news;

--Next, build on the previous query: Add a column for the number of stories from each URL using COUNT().Also, GROUP BY the CASE statement. Remember that you can refer to a column in GROUP BY using a number.

SELECT CASE
WHEN url LIKE '%medium.com%' THEN 'Medium'
WHEN url LIKE '%github.com%' THEN 'Github'
WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
ELSE 'Other'
END AS 'Source',
Count(*)
FROM hacker_news
Group by 1;

--SQLite comes with a strftime() function - a very powerful function that allows you to return a formatted date.It takes two arguments: strftime(format, column)

SELECT timestamp,
   strftime('%H', timestamp)
FROM hacker_news
GROUP BY 1
LIMIT 20;

--Okay, now we understand how strftime() works. Let’s write a query that returns three columns:The hours of the timestamp,The average score for each hour,The count of stories for each hour

SELECT strftime('%H', timestamp), 
   AVG(score),
   COUNT(*)
FROM hacker_news
GROUP BY 1
ORDER BY 1;

--Let’s edit a few things in the previous query:Round the average scores (ROUND()).Rename the columns to make it more readable (AS).Add a WHERE clause to filter out the NULL values in timestamp.Take a look at the result again: What are the best hours to post a story on Hacker News?

SELECT strftime('%H', timestamp) AS 'Hour', 
   ROUND(AVG(score), 1) AS 'Average Score', 
   COUNT(*) AS 'Number of Stories'
FROM hacker_news
WHERE timestamp IS NOT NULL
GROUP BY 1
ORDER BY 1;